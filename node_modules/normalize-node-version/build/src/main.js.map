{"version":3,"sources":["../../src/main.js"],"names":["normalizeNodeVersion","versionRange","opts","allNodeVersionsOpts","versions","version","Error","module","exports"],"mappings":"aAAA;AACA;;AAEA,qC;;;AAGA,KAAMA,CAAAA,oBAAoB,CAAG,eAAgBC,YAAhB,CAA8BC,IAA9B,CAAoC;AAC/D,KAAM,CAAEC,mBAAF,EAA0B,qBAAQD,IAAR,CAAhC;AACA,KAAM,CAAEE,QAAF,EAAe,KAAM,6BAAgBD,mBAAhB,CAA3B;;AAEA,KAAME,CAAAA,OAAO,CAAG,0BAAcD,QAAd,CAAwBH,YAAxB,CAAhB;;AAEA,GAAII,OAAO,GAAK,IAAhB,CAAsB;AACpB,KAAM,IAAIC,CAAAA,KAAJ,CAAW,yBAAwBL,YAAa,EAAhD,CAAN;AACD;;AAED,MAAOI,CAAAA,OAAP;AACD,CAXD;;;;AAeAE,MAAM,CAACC,OAAP,CAAiBR,oBAAjB","sourcesContent":["import allNodeVersions from 'all-node-versions'\nimport { maxSatisfying } from 'semver'\n\nimport { getOpts } from './options.js'\n\n// Retrieve the Node version matching a specific `versionRange`\nconst normalizeNodeVersion = async function (versionRange, opts) {\n  const { allNodeVersionsOpts } = getOpts(opts)\n  const { versions } = await allNodeVersions(allNodeVersionsOpts)\n\n  const version = maxSatisfying(versions, versionRange)\n\n  if (version === null) {\n    throw new Error(`Invalid Node version: ${versionRange}`)\n  }\n\n  return version\n}\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = normalizeNodeVersion\n"],"file":"src/main.js"}