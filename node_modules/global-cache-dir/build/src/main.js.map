{"version":3,"sources":["../../src/main.js"],"names":["globalCacheDir","name","cacheDir","createCacheDir","promises","mkdir","recursive","module","exports"],"mappings":"aAAA;;AAEA;AACA,+D;;;AAGA,KAAMA,CAAAA,cAAc,CAAG,eAAeC,IAAf,CAAqB;AAC1C,KAAMC,CAAAA,QAAQ,CAAG,sBAAYD,IAAZ,CAAjB;;AAEA,KAAME,CAAAA,cAAc,CAACD,QAAD,CAApB;;AAEA,MAAOA,CAAAA,QAAP;AACD,CAND;;AAQA,KAAMC,CAAAA,cAAc,CAAG,eAAeD,QAAf,CAAyB;AAC9C,GAAI,KAAM,wBAAWA,QAAX,CAAV,CAAgC;AAC9B;AACD;;AAED,KAAME,cAASC,KAAT,CAAeH,QAAf,CAAyB,CAAEI,SAAS,CAAE,IAAb,CAAzB,CAAN;AACD,CAND;;;;AAUAC,MAAM,CAACC,OAAP,CAAiBR,cAAjB","sourcesContent":["import { promises } from 'fs'\n\nimport getCacheDir from 'cachedir'\nimport pathExists from 'path-exists'\n\n// Get the global cache directory\nconst globalCacheDir = async function(name) {\n  const cacheDir = getCacheDir(name)\n\n  await createCacheDir(cacheDir)\n\n  return cacheDir\n}\n\nconst createCacheDir = async function(cacheDir) {\n  if (await pathExists(cacheDir)) {\n    return\n  }\n\n  await promises.mkdir(cacheDir, { recursive: true })\n}\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = globalCacheDir\n"],"file":"src/main.js"}