{"version":3,"sources":["../../../src/handle/common.js"],"names":["handleEvent","opts","name","previousEvents","mEmitLimitedWarning","promise","value","nextRejected","nextValue","event","logEvent","error","stack","mainValue","level","log"],"mappings":"iGAAA;AACA;AACA;AACA;AACA;;AAEA;;;AAGO,KAAMA,CAAAA,WAAW,CAAG,eAAe;AACxCC,IADwC;AAExCC,IAFwC;AAGxCC,cAHwC;AAIxCC,mBAJwC;AAKxCC,OALwC;AAMxCC,KANwC;AAOxCC,YAPwC;AAQxCC,SARwC,CAAf;AASxB;AACD,GAAI,qBAAU,CAAEL,cAAF,CAAkBC,mBAAlB,CAAuCF,IAAvC,CAA6CI,KAA7C,CAAV,CAAJ,CAAqE;AACnE;AACD;;AAED,KAAMG,CAAAA,KAAK,CAAG,KAAM,oBAAS;AAC3BP,IAD2B;AAE3BG,OAF2B;AAG3BC,KAH2B;AAI3BC,YAJ2B;AAK3BC,SAL2B,CAAT,CAApB;;;AAQA,GAAI,uBAAW,CAAEC,KAAF,CAASN,cAAT,CAAX,CAAJ,CAA2C;AACzC;AACD;;AAED,KAAMO,CAAAA,QAAQ,CAAC,CAAET,IAAF,CAAQC,IAAR,CAAcO,KAAd,CAAD,CAAd;;AAEA,KAAM,sBAAY,CAAEP,IAAF,CAAQD,IAAR,CAAZ,CAAN;AACD,CA7BM,C;;AA+BP,KAAMS,CAAAA,QAAQ,CAAG,eAAe,CAAET,IAAF,CAAQC,IAAR,CAAcO,KAAd,CAAf,CAAsC;AACrD,KAAM,CAAEE,KAAF,CAASC,KAAT,CAAgBC,SAAhB,EAA8B,mBAAS,CAAEX,IAAF,CAAQO,KAAR,CAAT,CAApC;;AAEA,KAAMK,CAAAA,KAAK,CAAG,oBAAS,CAAEb,IAAF,CAAQC,IAAR,CAAcS,KAAd,CAAT,CAAd;;AAEA,GAAIG,KAAK,GAAK,QAAd,CAAwB;AACtB;AACD;;AAED,wBAAc,CAAEH,KAAF,CAASV,IAAT,CAAea,KAAf,CAAsBZ,IAAtB,CAA4BU,KAA5B,CAAd;;;AAGA,KAAMX,CAAAA,IAAI,CAACc,GAAL,CAASJ,KAAT,CAAgBG,KAAhB,CAAuBD,SAAvB,CAAN;AACD,CAbD","sourcesContent":["import { isLimited } from '../limit.js'\nimport { isRepeated } from '../repeat.js'\nimport { getLevel } from '../level.js'\nimport { getError, addErrorPrint } from '../error/main.js'\nimport { exitProcess } from '../exit.js'\n\nimport { getEvent } from './event.js'\n\n// Generic event handler for all events.\nexport const handleEvent = async function({\n  opts,\n  name,\n  previousEvents,\n  mEmitLimitedWarning,\n  promise,\n  value,\n  nextRejected,\n  nextValue,\n}) {\n  if (isLimited({ previousEvents, mEmitLimitedWarning, name, value })) {\n    return\n  }\n\n  const event = await getEvent({\n    name,\n    promise,\n    value,\n    nextRejected,\n    nextValue,\n  })\n\n  if (isRepeated({ event, previousEvents })) {\n    return\n  }\n\n  await logEvent({ opts, name, event })\n\n  await exitProcess({ name, opts })\n}\n\nconst logEvent = async function({ opts, name, event }) {\n  const { error, stack, mainValue } = getError({ name, event })\n\n  const level = getLevel({ opts, name, error })\n\n  if (level === 'silent') {\n    return\n  }\n\n  addErrorPrint({ error, opts, level, name, stack })\n\n  // See `exit.js` on why we need to `await`\n  await opts.log(error, level, mainValue)\n}\n"],"file":"src/handle/common.js"}