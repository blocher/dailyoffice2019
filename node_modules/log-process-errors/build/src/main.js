"use strict";var _process=_interopRequireDefault(require("process"));

var _moize=_interopRequireDefault(require("moize"));


var EVENTS=_interopRequireWildcard(require("./handle/main.js"));
var _limit=require("./limit.js");
var _main2=require("./options/main.js");
var _warnings=require("./warnings.js");function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap;_getRequireWildcardCache=function(){return cache};return cache}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}


const logProcessErrors=function(opts){
const optsA=(0,_main2.getOptions)({opts});

(0,_warnings.removeWarningListener)();

const listeners=addListeners({opts:optsA});


const stopLogProcessErrors=()=>stopLogging(listeners);
return stopLogProcessErrors;
};

const addListeners=function({opts}){
return Object.entries(EVENTS).map(([name,eventFunc])=>
addListener({opts,name,eventFunc}));

};

const addListener=function({opts,name,eventFunc}){




const previousEvents=new Set;

const mEmitLimitedWarning=(0,_moize.default)(_limit.emitLimitedWarning,{
maxSize:Number.POSITIVE_INFINITY});


const eventListener=eventFunc.bind(undefined,{
opts,
name,
previousEvents,
mEmitLimitedWarning});

_process.default.on(name,eventListener);

return{eventListener,name};
};


const stopLogging=function(listeners){
listeners.forEach(removeListener);
(0,_warnings.restoreWarningListener)();
};

const removeListener=function({eventListener,name}){
_process.default.off(name,eventListener);
};



module.exports=logProcessErrors;
//# sourceMappingURL=main.js.map