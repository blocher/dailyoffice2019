{"version":3,"sources":["../../src/main.js"],"names":["logProcessErrors","opts","optsA","listeners","addListeners","stopLogProcessErrors","stopLogging","Object","entries","EVENTS","map","name","eventFunc","addListener","previousEvents","Set","mEmitLimitedWarning","emitLimitedWarning","maxSize","Number","POSITIVE_INFINITY","eventListener","bind","undefined","process","on","forEach","removeListener","off","module","exports"],"mappings":"aAAA;;AAEA;;;AAGA;AACA;AACA;AACA,uC;;;AAGA,KAAMA,CAAAA,gBAAgB,CAAG,SAAUC,IAAV,CAAgB;AACvC,KAAMC,CAAAA,KAAK,CAAG,sBAAW,CAAED,IAAF,CAAX,CAAd;;AAEA;;AAEA,KAAME,CAAAA,SAAS,CAAGC,YAAY,CAAC,CAAEH,IAAI,CAAEC,KAAR,CAAD,CAA9B;;;AAGA,KAAMG,CAAAA,oBAAoB,CAAG,IAAMC,WAAW,CAACH,SAAD,CAA9C;AACA,MAAOE,CAAAA,oBAAP;AACD,CAVD;;AAYA,KAAMD,CAAAA,YAAY,CAAG,SAAU,CAAEH,IAAF,CAAV,CAAoB;AACvC,MAAOM,CAAAA,MAAM,CAACC,OAAP,CAAeC,MAAf,EAAuBC,GAAvB,CAA2B,CAAC,CAACC,IAAD,CAAOC,SAAP,CAAD;AAChCC,WAAW,CAAC,CAAEZ,IAAF,CAAQU,IAAR,CAAcC,SAAd,CAAD,CADN,CAAP;;AAGD,CAJD;;AAMA,KAAMC,CAAAA,WAAW,CAAG,SAAU,CAAEZ,IAAF,CAAQU,IAAR,CAAcC,SAAd,CAAV,CAAqC;;;;;AAKvD,KAAME,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAA3B;;AAEA,KAAMC,CAAAA,mBAAmB,CAAG,mBAAMC,yBAAN,CAA0B;AACpDC,OAAO,CAAEC,MAAM,CAACC,iBADoC,CAA1B,CAA5B;;;AAIA,KAAMC,CAAAA,aAAa,CAAGT,SAAS,CAACU,IAAV,CAAeC,SAAf,CAA0B;AAC9CtB,IAD8C;AAE9CU,IAF8C;AAG9CG,cAH8C;AAI9CE,mBAJ8C,CAA1B,CAAtB;;AAMAQ,iBAAQC,EAAR,CAAWd,IAAX,CAAiBU,aAAjB;;AAEA,MAAO,CAAEA,aAAF,CAAiBV,IAAjB,CAAP;AACD,CApBD;;;AAuBA,KAAML,CAAAA,WAAW,CAAG,SAAUH,SAAV,CAAqB;AACvCA,SAAS,CAACuB,OAAV,CAAkBC,cAAlB;AACA;AACD,CAHD;;AAKA,KAAMA,CAAAA,cAAc,CAAG,SAAU,CAAEN,aAAF,CAAiBV,IAAjB,CAAV,CAAmC;AACxDa,iBAAQI,GAAR,CAAYjB,IAAZ,CAAkBU,aAAlB;AACD,CAFD;;;;AAMAQ,MAAM,CAACC,OAAP,CAAiB9B,gBAAjB","sourcesContent":["import process from 'process'\n\nimport moize from 'moize'\n\n// eslint-disable-next-line import/no-namespace\nimport * as EVENTS from './handle/main.js'\nimport { emitLimitedWarning } from './limit.js'\nimport { getOptions } from './options/main.js'\nimport { removeWarningListener, restoreWarningListener } from './warnings.js'\n\n// Add event handling for all process-related errors\nconst logProcessErrors = function (opts) {\n  const optsA = getOptions({ opts })\n\n  removeWarningListener()\n\n  const listeners = addListeners({ opts: optsA })\n\n  // Do not use `function.bind()` to keep the right `function.name`\n  const stopLogProcessErrors = () => stopLogging(listeners)\n  return stopLogProcessErrors\n}\n\nconst addListeners = function ({ opts }) {\n  return Object.entries(EVENTS).map(([name, eventFunc]) =>\n    addListener({ opts, name, eventFunc }),\n  )\n}\n\nconst addListener = function ({ opts, name, eventFunc }) {\n  // `previousEvents` is event-name-specific so that if events of a given event\n  // stopped being emitted, others still are.\n  // `previousEvents` can take up some memory, but it should be cleaned up\n  // by `removeListener()`, i.e. once `eventListener` is garbage collected.\n  const previousEvents = new Set()\n  // Should only emit the warning once per event name and per `init()`\n  const mEmitLimitedWarning = moize(emitLimitedWarning, {\n    maxSize: Number.POSITIVE_INFINITY,\n  })\n\n  const eventListener = eventFunc.bind(undefined, {\n    opts,\n    name,\n    previousEvents,\n    mEmitLimitedWarning,\n  })\n  process.on(name, eventListener)\n\n  return { eventListener, name }\n}\n\n// Remove all event handlers and restore previous `warning` listeners\nconst stopLogging = function (listeners) {\n  listeners.forEach(removeListener)\n  restoreWarningListener()\n}\n\nconst removeListener = function ({ eventListener, name }) {\n  process.off(name, eventListener)\n}\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = logProcessErrors\n"],"file":"src/main.js"}