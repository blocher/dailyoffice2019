{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { ClipboardPlugin, ReadResult, WriteOptions } from './definitions';\n\ndeclare global {\n  interface Clipboard {\n    read(): Promise<any>;\n    write(data: any[]): Promise<any>;\n  }\n}\n\ndeclare let ClipboardItem: any;\n\nexport class ClipboardWeb extends WebPlugin implements ClipboardPlugin {\n  async write(options: WriteOptions): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n\n    if (options.string !== undefined) {\n      await this.writeText(options.string);\n    } else if (options.url) {\n      await this.writeText(options.url);\n    } else if (options.image) {\n      if (typeof ClipboardItem !== 'undefined') {\n        try {\n          const blob = await (await fetch(options.image)).blob();\n          const clipboardItemInput = new ClipboardItem({ [blob.type]: blob });\n          await navigator.clipboard.write([clipboardItemInput]);\n        } catch (err) {\n          throw new Error('Failed to write image');\n        }\n      } else {\n        throw this.unavailable(\n          'Writing images to the clipboard is not supported in this browser',\n        );\n      }\n    } else {\n      throw new Error('Nothing to write');\n    }\n  }\n\n  async read(): Promise<ReadResult> {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n\n    if (typeof ClipboardItem !== 'undefined') {\n      try {\n        const clipboardItems = await navigator.clipboard.read();\n        const type = clipboardItems[0].types[0];\n        const clipboardBlob = await clipboardItems[0].getType(type);\n        const data = await this._getBlobData(clipboardBlob, type);\n        return { value: data, type };\n      } catch (err) {\n        return this.readText();\n      }\n    } else {\n      return this.readText();\n    }\n  }\n\n  private async readText() {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.readText\n    ) {\n      throw this.unavailable(\n        'Reading from clipboard not supported in this browser',\n      );\n    }\n\n    const text = await navigator.clipboard.readText();\n    return { value: text, type: 'text/plain' };\n  }\n\n  private async writeText(text: string) {\n    if (\n      typeof navigator === 'undefined' ||\n      !navigator.clipboard ||\n      !navigator.clipboard.writeText\n    ) {\n      throw this.unavailable(\n        'Writting to clipboard not supported in this browser',\n      );\n    }\n\n    await navigator.clipboard.writeText(text);\n  }\n\n  private _getBlobData(clipboardBlob: Blob, type: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      const reader = new FileReader();\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n      reader.onloadend = () => {\n        const r = reader.result as string;\n        resolve(r);\n      };\n      reader.onerror = e => {\n        reject(e);\n      };\n    });\n  }\n}\n"]}