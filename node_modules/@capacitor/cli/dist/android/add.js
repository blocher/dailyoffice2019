"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
const fs_1 = require("../util/fs");
const os_1 = require("os");
const path_1 = require("path");
async function addAndroid(config) {
    await common_1.runTask(`Installing android dependencies`, async (info) => {
        if (common_1.resolveNode(config, '@capacitor/android')) {
            info('Skipping: already installed');
            return;
        }
        return common_1.installDeps(config.app.rootDir, ['@capacitor/android'], config);
    });
    await common_1.runTask(`Adding native android project in: ${config.android.platformDir}`, async () => {
        return common_1.copyTemplate(config.android.assets.templateDir, config.android.platformDir);
    });
    await common_1.runTask(`Syncing Gradle`, async () => {
        return createLocalProperties(config.android.platformDir);
    });
}
exports.addAndroid = addAndroid;
async function createLocalProperties(platformDir) {
    const defaultAndroidPath = path_1.join(os_1.homedir(), 'Library/Android/sdk');
    if (await fs_1.existsAsync(defaultAndroidPath)) {
        const localSettings = `
## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=${defaultAndroidPath}
  `;
        await fs_1.writeFileAsync(path_1.join(platformDir, 'local.properties'), localSettings, 'utf8');
        // Only sync if we were able to create the local properties above, otherwise
        // this will fail
        try {
            await gradleSync(platformDir);
        }
        catch (e) {
            console.error('Error running gradle sync', e);
            console.error('Unable to infer default Android SDK settings. This is fine, just run npx cap open android and import and sync gradle manually');
        }
    }
}
async function gradleSync(platformDir) {
    await common_1.runCommand(`${platformDir}/gradlew`);
}
