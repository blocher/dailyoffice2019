"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.addProgress=void 0;var _stream=require("stream");
var _util=require("util");

var _chalk=require("chalk");
var _cliProgress=require("cli-progress");
var _figures=require("figures");

const pFinished=(0,_util.promisify)(_stream.finished);



const addProgress=async function(response,progress,path){
if(!progress||!showsBar()){
return;
}

const bar=startBar(path);

response.on("downloadProgress",({percent})=>{
bar.update(percent);
});

try{
await pFinished(response,{writable:false});
}catch{}

stopBar(bar);
};exports.addProgress=addProgress;

const MULTIBAR_OPTS={
format:`  ${(0,_chalk.green)(_figures.nodejs)}  {prefix}  {bar}`,
barCompleteChar:"\u2588",
barIncompleteChar:"\u2591",
stopOnComplete:true,
clearOnComplete:true,
hideCursor:true};






const multibar=new _cliProgress.MultiBar(MULTIBAR_OPTS);


const startBar=function(path){
const bar=multibar.create();
const prefix=getPrefix(path);
bar.start(1,0,{prefix});
return bar;
};


const showsBar=function(){
return multibar.terminal.isTTY();
};


const getPrefix=function(path){
const version=VERSION_TEXT_REGEXP.exec(path);

if(version!==null){
return`${VERSION_TEXT} ${version[1].padEnd(VERSION_PADDING)}`;
}

if(INDEX_TEXT_REGEXP.test(path)){
return INDEX_TEXT;
}

return DEFAULT_TEXT;
};

const VERSION_TEXT_REGEXP=/^\/?v([\d.]+)\//u;
const INDEX_TEXT_REGEXP=/^\/?index.(json|tab)$/u;
const VERSION_PADDING=7;

const VERSION_TEXT="Node.js";
const INDEX_TEXT="List of Node.js versions";
const DEFAULT_TEXT="Node.js";


const stopBar=function(bar){
bar.stop();
multibar.remove(bar);


if(multibar.bars.length===0){
multibar.stop();
}
};
//# sourceMappingURL=progress.js.map