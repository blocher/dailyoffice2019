{"version":3,"sources":["../../src/main.js"],"names":["keepFuncProps","functor","newFunctor","func","args","newFunc","call","ignoreNonConfigurable","keepFuncPropsA","keepFuncPropsB","module","exports"],"mappings":"aAAA,yD;;;AAGA,KAAMA,CAAAA,aAAa,CAAG,SAAUC,OAAV,CAAmB;AACvC,GAAI,MAAOA,CAAAA,OAAP,GAAmB,UAAvB,CAAmC;AACjC,MAAOA,CAAAA,OAAP;AACD;;AAED,MAAO,SAASC,CAAAA,UAAT,CAAoBC,IAApB,CAA0B,GAAGC,IAA7B,CAAmC;;AAExC,KAAMC,CAAAA,OAAO,CAAGJ,OAAO,CAACK,IAAR,CAAa,IAAb,CAAmBH,IAAnB,CAAyB,GAAGC,IAA5B,CAAhB;;AAEA,GAAI,MAAOD,CAAAA,IAAP,GAAgB,UAAhB,EAA8B,MAAOE,CAAAA,OAAP,GAAmB,UAArD,CAAiE;AAC/D,qBAAQA,OAAR,CAAiBF,IAAjB,CAAuB,CAAEI,qBAAqB,CAAE,IAAzB,CAAvB;AACD;;AAED,MAAOF,CAAAA,OAAP;AACD,CATD;AAUD,CAfD;;;;AAmBA,KAAMG,CAAAA,cAAc,CAAGR,aAAa,CAACA,aAAD,CAApC;;;AAGA,KAAMS,CAAAA,cAAc,CAAGD,cAAc,CAACR,aAAD,CAArC;;;;AAIAU,MAAM,CAACC,OAAP,CAAiBF,cAAjB","sourcesContent":["import mimicFn from 'mimic-fn'\n\n// Wraps a functor so it does not modify a function `name`, etc.\nconst keepFuncProps = function (functor) {\n  if (typeof functor !== 'function') {\n    return functor\n  }\n\n  return function newFunctor(func, ...args) {\n    // eslint-disable-next-line fp/no-this, no-invalid-this\n    const newFunc = functor.call(this, func, ...args)\n\n    if (typeof func === 'function' && typeof newFunc === 'function') {\n      mimicFn(newFunc, func, { ignoreNonConfigurable: true })\n    }\n\n    return newFunc\n  }\n}\n\n// Use on itself so that `keepFuncProps(functor)` does not modify functor's\n// properties\nconst keepFuncPropsA = keepFuncProps(keepFuncProps)\n// Then we use it on `keepFuncProps()` itself so that it's named `keepFuncProps`\n// instead of `newFunctor`\nconst keepFuncPropsB = keepFuncPropsA(keepFuncProps)\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = keepFuncPropsB\n"],"file":"src/main.js"}