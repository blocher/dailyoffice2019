{"version":3,"sources":["../../src/lts.js"],"names":["getLtsAlias","alias","allNodeOpts","ltsMajors","getLtsMajors","major","getLtsMajor","undefined","latest","majors","filter","isLts","lts","LATEST_LTS","has","getNumberedLts","getNamedLts","Set","result","NUMBER_LTS_REGEXP","exec","name","replace","LTS_PREFIX","toLowerCase","find"],"mappings":"sHAAA,0E;;;;AAIO,KAAMA,CAAAA,WAAW,CAAG,eAAgBC,KAAhB,CAAuBC,WAAvB,CAAoC;AAC7D,KAAMC,CAAAA,SAAS,CAAG,KAAMC,CAAAA,YAAY,CAACF,WAAD,CAApC;AACA,KAAMG,CAAAA,KAAK,CAAGC,WAAW,CAACL,KAAD,CAAQE,SAAR,CAAzB;;AAEA,GAAIE,KAAK,GAAKE,SAAd,CAAyB;AACvB;AACD;;AAED,MAAOF,CAAAA,KAAK,CAACG,MAAb;AACD,CATM,C;;;AAYA,KAAMJ,CAAAA,YAAY,CAAG,eAAgBF,WAAhB,CAA6B;AACvD,KAAM,CAAEO,MAAF,EAAa,KAAM,6BAAgBP,WAAhB,CAAzB;AACA,MAAOO,CAAAA,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAP;AACD,CAHM,C;;AAKP,KAAMA,CAAAA,KAAK,CAAG,SAAU,CAAEC,GAAF,CAAV,CAAmB;AAC/B,MAAOA,CAAAA,GAAG,GAAKL,SAAf;AACD,CAFD;;;AAKA,KAAMD,CAAAA,WAAW,CAAG,SAAUL,KAAV,CAAiBE,SAAjB,CAA4B;AAC9C,GAAIU,UAAU,CAACC,GAAX,CAAeb,KAAf,CAAJ,CAA2B;AACzB,MAAOE,CAAAA,SAAS,CAAC,CAAD,CAAhB;AACD;;AAED,KAAME,CAAAA,KAAK,CAAGU,cAAc,CAACd,KAAD,CAAQE,SAAR,CAA5B;;AAEA,GAAIE,KAAK,GAAKE,SAAd,CAAyB;AACvB,MAAOF,CAAAA,KAAP;AACD;;AAED,MAAOW,CAAAA,WAAW,CAACf,KAAD,CAAQE,SAAR,CAAlB;AACD,CAZD;;;;;;AAkBA,KAAMU,CAAAA,UAAU,CAAG,GAAII,CAAAA,GAAJ,CAAQ,CAAC,KAAD,CAAQ,OAAR,CAAiB,QAAjB,CAAR,CAAnB;;;;AAIA,KAAMF,CAAAA,cAAc,CAAG,SAAUd,KAAV,CAAiBE,SAAjB,CAA4B;AACjD,KAAMe,CAAAA,MAAM,CAAGC,iBAAiB,CAACC,IAAlB,CAAuBnB,KAAvB,CAAf;;AAEA,GAAIiB,MAAM,GAAK,IAAf,CAAqB;AACnB;AACD;;AAED,MAAOf,CAAAA,SAAS,CAACe,MAAM,CAAC,CAAD,CAAN,CAAY,CAAb,CAAhB;AACD,CARD;;AAUA,KAAMC,CAAAA,iBAAiB,CAAG,gBAA1B;;;;AAIA,KAAMH,CAAAA,WAAW,CAAG,SAAUf,KAAV,CAAiBE,SAAjB,CAA4B;AAC9C,KAAMkB,CAAAA,IAAI,CAAGpB,KAAK,CAACqB,OAAN,CAAcC,UAAd,CAA0B,EAA1B,EAA8BC,WAA9B,EAAb;AACA,MAAOrB,CAAAA,SAAS,CAACsB,IAAV,CAAe,CAAC,CAAEb,GAAF,CAAD,GAAaA,GAAG,GAAKS,IAApC,CAAP;AACD,CAHD;;AAKA,KAAME,CAAAA,UAAU,CAAG,MAAnB","sourcesContent":["import allNodeVersions from 'all-node-versions'\n\n// Normalize `lts`, `lts/*`, `lts/-num` and `[lts/]name` aliases used by\n// `.nvmrc` and others\nexport const getLtsAlias = async function (alias, allNodeOpts) {\n  const ltsMajors = await getLtsMajors(allNodeOpts)\n  const major = getLtsMajor(alias, ltsMajors)\n\n  if (major === undefined) {\n    return\n  }\n\n  return major.latest\n}\n\n// Retrieve all major releases that are LTS\nexport const getLtsMajors = async function (allNodeOpts) {\n  const { majors } = await allNodeVersions(allNodeOpts)\n  return majors.filter(isLts)\n}\n\nconst isLts = function ({ lts }) {\n  return lts !== undefined\n}\n\n// Find the LTS that matches the alias\nconst getLtsMajor = function (alias, ltsMajors) {\n  if (LATEST_LTS.has(alias)) {\n    return ltsMajors[0]\n  }\n\n  const major = getNumberedLts(alias, ltsMajors)\n\n  if (major !== undefined) {\n    return major\n  }\n\n  return getNamedLts(alias, ltsMajors)\n}\n\n// Those aliases mean the latest LTS\n// `lts` is used by n, nave, nvs, fish-nvm\n// `lts/*` is used by nvm, nave, nvs\n// `lts/-0` is used by nvm\nconst LATEST_LTS = new Set(['lts', 'lts/*', 'lts/-0'])\n\n// `lts/-num` means the numth latest LTS.\n// Used by nvm\nconst getNumberedLts = function (alias, ltsMajors) {\n  const result = NUMBER_LTS_REGEXP.exec(alias)\n\n  if (result === null) {\n    return\n  }\n\n  return ltsMajors[result[1] - 1]\n}\n\nconst NUMBER_LTS_REGEXP = /^lts\\/-(\\d+)$/u\n\n// `lts/name` or just `name` means a specific LTS named likewise.\n// Used by nvm, nave, nvs, fish-nvm\nconst getNamedLts = function (alias, ltsMajors) {\n  const name = alias.replace(LTS_PREFIX, '').toLowerCase()\n  return ltsMajors.find(({ lts }) => lts === name)\n}\n\nconst LTS_PREFIX = 'lts/'\n"],"file":"src/lts.js"}