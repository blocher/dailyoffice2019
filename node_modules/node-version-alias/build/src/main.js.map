{"version":3,"sources":["../../src/main.js"],"names":["nodeVersionAlias","alias","opts","allNodeOpts","normalizeOpts","versionRange","getVersionRange","undefined","Error","version","versionRangeA","getRecursiveNvmAlias","aliasResult","module","exports"],"mappings":"sGAAA;AACA;;AAEA;AACA;AACA;AACA,qC;;;;AAIO,KAAMA,CAAAA,gBAAgB,CAAG,eAAgBC,KAAhB,CAAuBC,IAAvB,CAA6B;AAC3D,KAAM,CAAEC,WAAF,CAAeC,aAAf,EAAiC,qBAAQF,IAAR,CAAvC;AACA,KAAMG,CAAAA,YAAY,CAAG,KAAMC,CAAAA,eAAe,CAACL,KAAD,CAAQE,WAAR,CAA1C;;AAEA,GAAIE,YAAY,GAAKE,SAArB,CAAgC;AAC9B,KAAM,IAAIC,CAAAA,KAAJ,CAAW,kCAAiCP,KAAM,EAAlD,CAAN;AACD;;AAED,KAAMQ,CAAAA,OAAO,CAAG,KAAM,kCAAqBJ,YAArB,CAAmCD,aAAnC,CAAtB;AACA,MAAOK,CAAAA,OAAP;AACD,CAVM,C;;AAYP,KAAMH,CAAAA,eAAe,CAAG,eAAgBL,KAAhB,CAAuBE,WAAvB,CAAoC;AAC1D,GAAI,uBAAWF,KAAX,IAAsB,IAA1B,CAAgC;AAC9B,MAAOA,CAAAA,KAAP;AACD;;AAED,KAAMI,CAAAA,YAAY,CAAG,KAAM,+BAAiBJ,KAAjB,CAA3B;;AAEA,GAAII,YAAY,GAAKE,SAArB,CAAgC;AAC9B,MAAOF,CAAAA,YAAP;AACD;;AAED,KAAMK,CAAAA,aAAa,CAAG,KAAM,qBAAYT,KAAZ,CAAmBE,WAAnB,CAA5B;;AAEA,GAAIO,aAAa,GAAKH,SAAtB,CAAiC;AAC/B,MAAOG,CAAAA,aAAP;AACD;;AAED,MAAOC,CAAAA,oBAAoB,CAACV,KAAD,CAAQE,WAAR,CAA3B;AACD,CAlBD;;;AAqBA,KAAMQ,CAAAA,oBAAoB,CAAG,eAAgBV,KAAhB,CAAuBE,WAAvB,CAAoC;AAC/D,KAAMS,CAAAA,WAAW,CAAG,KAAM,2BAAkBX,KAAlB,CAA1B;;AAEA,GAAIW,WAAW,GAAKL,SAApB,CAA+B;AAC7B;AACD;;AAED,MAAOD,CAAAA,eAAe,CAACM,WAAD,CAAcT,WAAd,CAAtB;AACD,CARD;;;;AAYAU,MAAM,CAACC,OAAP,CAAiBd,gBAAjB","sourcesContent":["import normalizeNodeVersion from 'normalize-node-version'\nimport { validRange } from 'semver'\n\nimport { getConstantAlias } from './constant.js'\nimport { getLtsAlias } from './lts.js'\nimport { getNvmCustomAlias } from './nvm.js'\nimport { getOpts } from './options.js'\n\n// Resolve Node.js version managers aliases like `latest`, `lts` or `erbium`.\n// First resolve them to a version range, then to a full version.\nexport const nodeVersionAlias = async function (alias, opts) {\n  const { allNodeOpts, normalizeOpts } = getOpts(opts)\n  const versionRange = await getVersionRange(alias, allNodeOpts)\n\n  if (versionRange === undefined) {\n    throw new Error(`Invalid Node.js version alias: ${alias}`)\n  }\n\n  const version = await normalizeNodeVersion(versionRange, normalizeOpts)\n  return version\n}\n\nconst getVersionRange = async function (alias, allNodeOpts) {\n  if (validRange(alias) !== null) {\n    return alias\n  }\n\n  const versionRange = await getConstantAlias(alias)\n\n  if (versionRange !== undefined) {\n    return versionRange\n  }\n\n  const versionRangeA = await getLtsAlias(alias, allNodeOpts)\n\n  if (versionRangeA !== undefined) {\n    return versionRangeA\n  }\n\n  return getRecursiveNvmAlias(alias, allNodeOpts)\n}\n\n// nvm custom aliases can be recursive\nconst getRecursiveNvmAlias = async function (alias, allNodeOpts) {\n  const aliasResult = await getNvmCustomAlias(alias)\n\n  if (aliasResult === undefined) {\n    return\n  }\n\n  return getVersionRange(aliasResult, allNodeOpts)\n}\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = nodeVersionAlias\n"],"file":"src/main.js"}