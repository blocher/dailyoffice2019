"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newerVersion = exports.updateAvailable = exports.fetchVersion = exports.fetchLatest = void 0;
const download_1 = __importDefault(require("download"));
const make_dir_1 = __importDefault(require("make-dir"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const semver_1 = require("semver");
function fetchLatest(release, fetchOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line no-param-reassign
        release.version = yield resolveRelease(release.repository, fetchOptions);
        const agent = fetchOptions && fetchOptions.agent;
        return fetchVersion(release, { agent });
    });
}
exports.fetchLatest = fetchLatest;
function fetchVersion(release, { agent } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        validateRelease(release);
        yield downloadFile(release, { agent });
    });
}
exports.fetchVersion = fetchVersion;
function updateAvailable(repository, currentVersion, fetchOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const latestVersion = yield resolveRelease(repository, fetchOptions);
        return newerVersion(latestVersion, currentVersion);
    });
}
exports.updateAvailable = updateAvailable;
function resolveRelease(repository, fetchOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield node_fetch_1.default(`https://api.github.com/repos/${repository}/releases/latest`, fetchOptions);
        const json = yield res.json();
        if (res.status === 403 && typeof json.message === 'string' && json.message.includes('API rate limit exceeded')) {
            throw new Error('API rate limit exceeded, please try again later');
        }
        return json.tag_name;
    });
}
function downloadFile(release, { agent }) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `https://github.com/${release.repository}/releases/download/${release.version}/${release.package}`;
        yield make_dir_1.default(release.destination);
        yield download_1.default(url, release.destination, {
            extract: release.extract,
            agent: agent,
        });
    });
}
function validateRelease(release) {
    if (!release.repository) {
        throw new Error('Missing release repository');
    }
    if (!release.package) {
        throw new Error('Missing release package name');
    }
    if (!release.destination) {
        throw new Error('Missing release destination');
    }
    if (!release.version) {
        throw new Error('Missing release version');
    }
}
function newerVersion(latestVersion, currentVersion) {
    if (!latestVersion) {
        return false;
    }
    if (!currentVersion) {
        return true;
    }
    const normalizedLatestVersion = latestVersion.replace(/^v/, '');
    const normalizedCurrentVersion = currentVersion.replace(/^v/, '');
    return semver_1.gt(normalizedLatestVersion, normalizedCurrentVersion);
}
exports.newerVersion = newerVersion;
