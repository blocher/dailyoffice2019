"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const download = require("download");
const mkdirp = require("mkdirp");
const node_fetch_1 = require("node-fetch");
const semver_1 = require("semver");
function fetchLatest(release) {
    return __awaiter(this, void 0, void 0, function* () {
        release.version = yield resolveRelease(release.repository);
        return fetchVersion(release);
    });
}
exports.fetchLatest = fetchLatest;
function fetchVersion(release) {
    return __awaiter(this, void 0, void 0, function* () {
        validateRelease(release);
        yield downloadFile(release);
    });
}
exports.fetchVersion = fetchVersion;
function updateAvailable(repository, currentVersion) {
    return __awaiter(this, void 0, void 0, function* () {
        const latestVersion = yield resolveRelease(repository);
        return semver_1.gt(latestVersion, currentVersion);
    });
}
exports.updateAvailable = updateAvailable;
function resolveRelease(repository) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield node_fetch_1.default(`https://api.github.com/repos/${repository}/releases/latest`);
        const json = yield res.json();
        return json.tag_name;
    });
}
function downloadFile(release) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `https://github.com/${release.repository}/releases/download/${release.version}/${release.package}`;
        mkdirp.sync(release.destination);
        yield download(url, release.destination, { extract: release.extract });
    });
}
function validateRelease(release) {
    if (!release.repository) {
        throw new Error('Missing release repository');
    }
    if (!release.package) {
        throw new Error('Missing release package name');
    }
    if (!release.destination) {
        throw new Error('Missing release destination');
    }
    if (!release.version) {
        throw new Error('Missing release version');
    }
}
