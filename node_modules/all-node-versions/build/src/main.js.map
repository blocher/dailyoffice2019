{"version":3,"sources":["../../src/main.js"],"names":["allNodeVersions","opts","fetch","fetchNodeOpts","versionsInfo","getAllVersions","processCachedVersions","undefined","env","TEST_CACHE_FILENAME","getVersionsInfo","cachedVersions","index","error","module","exports"],"mappings":"aAAA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA,KAAMA,CAAAA,eAAe,CAAG,eAAgBC,IAAhB,CAAsB;AAC5C,KAAM,CAAEC,KAAF,CAAS,GAAGC,aAAZ,EAA8B,qBAAQF,IAAR,CAApC;AACA,KAAMG,CAAAA,YAAY,CAAG,KAAMC,CAAAA,cAAc,CAACH,KAAD,CAAQC,aAAR,CAAzC;AACA,MAAOC,CAAAA,YAAP;AACD,CAJD;;;AAOA,KAAMC,CAAAA,cAAc,CAAG,eAAgBH,KAAhB,CAAuBC,aAAvB,CAAsC;AAC3D;AACEG,qBAAqB,GAAKC,SAA1B;AACAL,KAAK,GAAK,IADV;AAEA,CAACM,aAAIC,mBAHP;AAIE;AACA,MAAOH,CAAAA,qBAAP;AACD;;AAED,KAAMF,CAAAA,YAAY,CAAG,KAAMM,CAAAA,eAAe,CAACR,KAAD,CAAQC,aAAR,CAA1C;;;AAGAG,qBAAqB,CAAGF,YAAxB;;AAEA,MAAOA,CAAAA,YAAP;AACD,CAfD;;;AAkBA,GAAIE,CAAAA,qBAAJ;;;AAGA,KAAMI,CAAAA,eAAe,CAAG,eAAgBR,KAAhB,CAAuBC,aAAvB,CAAsC;AAC5D,KAAMQ,CAAAA,cAAc,CAAG,KAAM,6BAAmBT,KAAnB,CAA7B;;AAEA,GAAIS,cAAc,GAAKJ,SAAvB,CAAkC;AAChC,MAAOI,CAAAA,cAAP;AACD;;AAED,GAAI;AACF,KAAMC,CAAAA,KAAK,CAAG,KAAM,sBAAWT,aAAX,CAApB;AACA,KAAMC,CAAAA,YAAY,CAAG,8BAAeQ,KAAf,CAArB;AACA,KAAM,8BAAoBR,YAApB,CAAN;AACA,MAAOA,CAAAA,YAAP;AACD,CAAC,MAAOS,KAAP,CAAc;AACd,MAAO,gCAAmBA,KAAnB,CAAP;AACD;AACF,CAfD;;;;AAmBAC,MAAM,CAACC,OAAP,CAAiBf,eAAjB","sourcesContent":["import { env } from 'process'\n\nimport { handleOfflineError } from './cache/offline.js'\nimport { readCachedVersions, writeCachedVersions } from './cache/read.js'\nimport { fetchIndex } from './fetch.js'\nimport { normalizeIndex } from './normalize.js'\nimport { getOpts } from './options.js'\n\n// Fetch all available Node versions by making a HTTP request to Node website.\n// Versions are already sorted from newest to oldest.\nconst allNodeVersions = async function (opts) {\n  const { fetch, ...fetchNodeOpts } = getOpts(opts)\n  const versionsInfo = await getAllVersions(fetch, fetchNodeOpts)\n  return versionsInfo\n}\n\n// We cache the HTTP request once per process.\nconst getAllVersions = async function (fetch, fetchNodeOpts) {\n  if (\n    processCachedVersions !== undefined &&\n    fetch !== true &&\n    !env.TEST_CACHE_FILENAME\n  ) {\n    return processCachedVersions\n  }\n\n  const versionsInfo = await getVersionsInfo(fetch, fetchNodeOpts)\n\n  // eslint-disable-next-line fp/no-mutation, require-atomic-updates\n  processCachedVersions = versionsInfo\n\n  return versionsInfo\n}\n\n// eslint-disable-next-line fp/no-let, init-declarations\nlet processCachedVersions\n\n// We also cache the HTTP request for one hour using a cache file.\nconst getVersionsInfo = async function (fetch, fetchNodeOpts) {\n  const cachedVersions = await readCachedVersions(fetch)\n\n  if (cachedVersions !== undefined) {\n    return cachedVersions\n  }\n\n  try {\n    const index = await fetchIndex(fetchNodeOpts)\n    const versionsInfo = normalizeIndex(index)\n    await writeCachedVersions(versionsInfo)\n    return versionsInfo\n  } catch (error) {\n    return handleOfflineError(error)\n  }\n}\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = allNodeVersions\n"],"file":"src/main.js"}