{"version":3,"sources":["../../../src/cache/file.js"],"names":["getCacheFile","cacheDir","CACHE_DIR","cacheFilename","env","TEST_CACHE_FILENAME","CACHE_FILENAME","getCacheFileContent","cacheFile","cacheFileContent","fs","readFile","lastUpdate","versionsInfo","JSON","parse","age","Date","now","setCacheFileContent","cacheContent","stringify"],"mappings":"0JAAA;AACA;;AAEA;AACA,0E;;;AAGO,KAAMA,CAAAA,YAAY,CAAG,gBAAkB;AAC5C,KAAMC,CAAAA,QAAQ,CAAG,KAAM,4BAAeC,SAAf,CAAvB;AACA,KAAMC,CAAAA,aAAa,CAAGC,aAAIC,mBAAJ,EAA2BC,cAAjD;AACA,MAAQ,GAAEL,QAAS,IAAGE,aAAc,EAApC;AACD,CAJM,C;;AAMP,KAAMD,CAAAA,SAAS,CAAG,KAAlB;AACA,KAAMI,CAAAA,cAAc,CAAG,eAAvB;;;AAGO,KAAMC,CAAAA,mBAAmB,CAAG,eAAgBC,SAAhB,CAA2B;AAC5D,KAAMC,CAAAA,gBAAgB,CAAG,KAAMC,cAAGC,QAAH,CAAYH,SAAZ,CAAuB,MAAvB,CAA/B;AACA,KAAM,CAAEI,UAAF,CAAc,GAAGC,YAAjB,EAAkCC,IAAI,CAACC,KAAL,CAAWN,gBAAX,CAAxC;AACA,KAAMO,CAAAA,GAAG,CAAGC,IAAI,CAACC,GAAL,GAAaN,UAAzB;AACA,MAAO,CAAEC,YAAF,CAAgBG,GAAhB,CAAP;AACD,CALM,C;;;AAQA,KAAMG,CAAAA,mBAAmB,CAAG,eAAgBX,SAAhB,CAA2BK,YAA3B,CAAyC;AAC1E,KAAMD,CAAAA,UAAU,CAAGK,IAAI,CAACC,GAAL,EAAnB;AACA,KAAME,CAAAA,YAAY,CAAG,CAAER,UAAF,CAAc,GAAGC,YAAjB,CAArB;AACA,KAAMJ,CAAAA,gBAAgB,CAAI,GAAEK,IAAI,CAACO,SAAL,CAAeD,YAAf,CAA6B,IAA7B,CAAmC,CAAnC,CAAsC,IAAlE;;AAEA,GAAI;AACF,KAAM,6BAAgBZ,SAAhB,CAA2BC,gBAA3B,CAAN;;;;;AAKD,CAAC,KAAM,CAAE;AACX,CAZM,C","sourcesContent":["import { promises as fs } from 'fs'\nimport { env } from 'process'\n\nimport globalCacheDir from 'global-cache-dir'\nimport writeFileAtomic from 'write-file-atomic'\n\n// The cache is persisted to `GLOBAL_CACHE_DIR/nve/versions.json`.\nexport const getCacheFile = async function () {\n  const cacheDir = await globalCacheDir(CACHE_DIR)\n  const cacheFilename = env.TEST_CACHE_FILENAME || CACHE_FILENAME\n  return `${cacheDir}/${cacheFilename}`\n}\n\nconst CACHE_DIR = 'nve'\nconst CACHE_FILENAME = 'versions.json'\n\n// Retrieve cache file's content\nexport const getCacheFileContent = async function (cacheFile) {\n  const cacheFileContent = await fs.readFile(cacheFile, 'utf8')\n  const { lastUpdate, ...versionsInfo } = JSON.parse(cacheFileContent)\n  const age = Date.now() - lastUpdate\n  return { versionsInfo, age }\n}\n\n// Persist cache file's content\nexport const setCacheFileContent = async function (cacheFile, versionsInfo) {\n  const lastUpdate = Date.now()\n  const cacheContent = { lastUpdate, ...versionsInfo }\n  const cacheFileContent = `${JSON.stringify(cacheContent, null, 2)}\\n`\n\n  try {\n    await writeFileAtomic(cacheFile, cacheFileContent)\n    // If two different functions are calling `normalize-node-version` at the\n    // same time and there's no cache file, they will both try to persist the\n    // file and one might fail, especially on Windows (with EPERM lock file\n    // errors)\n  } catch {}\n}\n"],"file":"src/cache/file.js"}