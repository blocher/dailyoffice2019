{"version":3,"sources":["../../../src/cache/read.js"],"names":["readCachedVersions","fetch","cacheFile","versionsInfo","age","isOldCache","MAX_AGE_MS","writeCachedVersions"],"mappings":"oIAAA;;AAEA,+B;;;;;;;;;;;;;;AAcO,KAAMA,CAAAA,kBAAkB,CAAG,eAAgBC,KAAhB,CAAuB;AACvD,GAAIA,KAAK,GAAK,IAAd,CAAoB;AAClB;AACD;;AAED,KAAMC,CAAAA,SAAS,CAAG,KAAM,wBAAxB;;AAEA,GAAI,EAAE,KAAM,wBAAWA,SAAX,CAAR,CAAJ,CAAoC;AAClC;AACD;;AAED,KAAM,CAAEC,YAAF,CAAgBC,GAAhB,EAAwB,KAAM,8BAAoBF,SAApB,CAApC;;AAEA,GAAIG,UAAU,CAACD,GAAD,CAAMH,KAAN,CAAd,CAA4B;AAC1B;AACD;;AAED,MAAOE,CAAAA,YAAP;AACD,CAlBM,C;;AAoBP,KAAME,CAAAA,UAAU,CAAG,SAAUD,GAAV,CAAeH,KAAf,CAAsB;AACvC,MAAOG,CAAAA,GAAG,CAAGE,UAAN,EAAoBL,KAAK,GAAK,KAArC;AACD,CAFD;;;AAKA,KAAMK,CAAAA,UAAU,CAAG,IAAnB;;;AAGO,KAAMC,CAAAA,mBAAmB,CAAG,eAAgBJ,YAAhB,CAA8B;AAC/D,KAAMD,CAAAA,SAAS,CAAG,KAAM,wBAAxB;AACA,KAAM,8BAAoBA,SAApB,CAA+BC,YAA/B,CAAN;AACD,CAHM,C","sourcesContent":["import pathExists from 'path-exists'\n\nimport {\n  getCacheFile,\n  getCacheFileContent,\n  setCacheFileContent,\n} from './file.js'\n\n// We cache the HTTP request. It only lasts for one hour (except offline)\n// to make sure we include new Node versions made available every week.\n// We also cache it in-memory so it's performed only once per process.\n// If the `fetch` option is:\n//   - `undefined`: we use the cache\n//   - `false`: we use the cache even if it is old\n//   - `true`: we do not use the cache\n// In all three cases, we update the cache on any successful HTTP request.\nexport const readCachedVersions = async function (fetch) {\n  if (fetch === true) {\n    return\n  }\n\n  const cacheFile = await getCacheFile()\n\n  if (!(await pathExists(cacheFile))) {\n    return\n  }\n\n  const { versionsInfo, age } = await getCacheFileContent(cacheFile)\n\n  if (isOldCache(age, fetch)) {\n    return\n  }\n\n  return versionsInfo\n}\n\nconst isOldCache = function (age, fetch) {\n  return age > MAX_AGE_MS && fetch !== false\n}\n\n// One hour\nconst MAX_AGE_MS = 36e5\n\n// Persist the cached versions\nexport const writeCachedVersions = async function (versionsInfo) {\n  const cacheFile = await getCacheFile()\n  await setCacheFileContent(cacheFile, versionsInfo)\n}\n"],"file":"src/cache/read.js"}