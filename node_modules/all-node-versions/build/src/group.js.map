{"version":3,"sources":["../../src/group.js"],"names":["groupBy","array","group","mapper","getMapper","groupByFunc","getByProp","bind","Array","isArray","getByProps","Error","propNames","object","keys","propName","key","String","item","undefined","push"],"mappings":";AACO,KAAMA,CAAAA,OAAO,CAAG,SAAUC,KAAV,CAAiBC,KAAjB,CAAwB;AAC7C,KAAMC,CAAAA,MAAM,CAAGC,SAAS,CAACF,KAAD,CAAxB;AACA,MAAOG,CAAAA,WAAW,CAACJ,KAAD,CAAQE,MAAR,CAAlB;AACD,CAHM,C;;AAKP,KAAMC,CAAAA,SAAS,CAAG,SAAUF,KAAV,CAAiB;AACjC,GAAI,MAAOA,CAAAA,KAAP,GAAiB,UAArB,CAAiC;AAC/B,MAAOA,CAAAA,KAAP;AACD;;AAED,GAAI,MAAOA,CAAAA,KAAP,GAAiB,QAArB,CAA+B;AAC7B,MAAOI,CAAAA,SAAS,CAACC,IAAV,CAAe,IAAf,CAAqBL,KAArB,CAAP;AACD;;AAED,GAAIM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAJ,CAA0B;AACxB,MAAOQ,CAAAA,UAAU,CAACH,IAAX,CAAgB,IAAhB,CAAsBL,KAAtB,CAAP;AACD;;AAED,KAAM,IAAIS,CAAAA,KAAJ,CAAW,2DAAX,CAAN;AACD,CAdD;;;AAiBA,KAAMD,CAAAA,UAAU,CAAG,SAAUE,SAAV,CAAqBC,MAArB,CAA6B;;AAE9C,GAAIC,CAAAA,IAAI,CAAG,EAAX;;;AAGA,IAAK,KAAMC,CAAAA,QAAX,GAAuBH,CAAAA,SAAvB,CAAkC;AAChC,KAAMI,CAAAA,GAAG,CAAGV,SAAS,CAACS,QAAD,CAAWF,MAAX,CAArB;;;AAGA,GAAIC,IAAI,GAAK,EAAb,CAAiB;;AAEfA,IAAI,CAAGE,GAAP;AACD,CAHD,IAGO;;AAELF,IAAI,CAAI,GAAEA,IAAK,IAAGE,GAAI,EAAtB;AACD;AACF;;AAED,MAAOF,CAAAA,IAAP;AACD,CAnBD;;;AAsBA,KAAMR,CAAAA,SAAS,CAAG,SAAUS,QAAV,CAAoBF,MAApB,CAA4B;AAC5C,GAAIA,MAAM,GAAK,IAAX,EAAmB,MAAOA,CAAAA,MAAP,GAAkB,QAAzC,CAAmD;AACjD,MAAO,EAAP;AACD;;AAED,MAAOI,CAAAA,MAAM,CAACJ,MAAM,CAACE,QAAD,CAAP,CAAb;AACD,CAND;;;AASA,KAAMV,CAAAA,WAAW,CAAG,SAAUJ,KAAV,CAAiBE,MAAjB,CAAyB;AAC3C,KAAMU,CAAAA,MAAM,CAAG,EAAf;;;AAGA,IAAK,KAAMK,CAAAA,IAAX,GAAmBjB,CAAAA,KAAnB,CAA0B;AACxB,KAAMe,CAAAA,GAAG,CAAGC,MAAM,CAACd,MAAM,CAACe,IAAD,CAAP,CAAlB;;;AAGA,GAAIL,MAAM,CAACG,GAAD,CAAN,GAAgBG,SAApB,CAA+B;;AAE7BN,MAAM,CAACG,GAAD,CAAN,CAAc,CAACE,IAAD,CAAd;AACD,CAHD,IAGO;;AAELL,MAAM,CAACG,GAAD,CAAN,CAAYI,IAAZ,CAAiBF,IAAjB;AACD;AACF;;AAED,MAAOL,CAAAA,MAAP;AACD,CAlBD","sourcesContent":["// Group array into an object using a function, property or array of properties\nexport const groupBy = function (array, group) {\n  const mapper = getMapper(group)\n  return groupByFunc(array, mapper)\n}\n\nconst getMapper = function (group) {\n  if (typeof group === 'function') {\n    return group\n  }\n\n  if (typeof group === 'string') {\n    return getByProp.bind(null, group)\n  }\n\n  if (Array.isArray(group)) {\n    return getByProps.bind(null, group)\n  }\n\n  throw new Error(`Group must be a function, property or array of properties`)\n}\n\n// Uses imperative code for performance\nconst getByProps = function (propNames, object) {\n  // eslint-disable-next-line fp/no-let\n  let keys = ''\n\n  // eslint-disable-next-line fp/no-loops\n  for (const propName of propNames) {\n    const key = getByProp(propName, object)\n\n    // eslint-disable-next-line max-depth\n    if (keys === '') {\n      // eslint-disable-next-line fp/no-mutation\n      keys = key\n    } else {\n      // eslint-disable-next-line fp/no-mutation\n      keys = `${keys}.${key}`\n    }\n  }\n\n  return keys\n}\n\n// `object` can be an array and `propName` an index integer\nconst getByProp = function (propName, object) {\n  if (object === null || typeof object !== 'object') {\n    return ''\n  }\n\n  return String(object[propName])\n}\n\n// Uses imperative code for performance\nconst groupByFunc = function (array, mapper) {\n  const object = {}\n\n  // eslint-disable-next-line fp/no-loops\n  for (const item of array) {\n    const key = String(mapper(item))\n\n    // eslint-disable-next-line max-depth\n    if (object[key] === undefined) {\n      // eslint-disable-next-line fp/no-mutation\n      object[key] = [item]\n    } else {\n      // eslint-disable-next-line fp/no-mutating-methods\n      object[key].push(item)\n    }\n  }\n\n  return object\n}\n"],"file":"src/group.js"}